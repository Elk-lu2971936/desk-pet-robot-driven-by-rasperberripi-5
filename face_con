#include <iostream>
#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <cstring>
#include <cmath>
#include <chrono>
#include <thread>
#include <cstdlib>

#define OLED_ADDR 0x3C
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define PAGE_COUNT (SCREEN_HEIGHT / 8)

// Expression code definition
#define EXP_SLEEP       0x01  // 睡觉
#define EXP_WIDE_EYES   0x02  // 瞪大眼
#define EXP_HAPPY       0x03  // 快乐
#define EXP_FRENZIED    0x04  // 狂热
#define EXP_VERY_HAPPY  0x05  // 非常快乐
#define EXP_GREETING    0x06  // 打招呼

// Send a single command to the OLED
void sendCommand(int file, uint8_t cmd) {
    uint8_t buffer[2] = {0x00, cmd};
    write(file, buffer, 2);
}

// Send a block of data to the OLED 
void sendData(int file, const uint8_t* data, size_t length) {
    uint8_t buffer[length + 1];
    buffer[0] = 0x40; //Data mode control word
    memcpy(&buffer[1], data, length);
    write(file, buffer, length + 1);
}

// Set or clear a pixel in the buffer
void setPixel(uint8_t* buffer, int x, int y, bool on) {
    if (x < 0 || x >= SCREEN_WIDTH || y < 0 || y >= SCREEN_HEIGHT)
        return;
    int page = y / 8;
    int index = page * SCREEN_WIDTH + x;
    if (on)
        buffer[index] |= (1 << (y % 8));
    else
        buffer[index] &= ~(1 << (y % 8));
}

/*
* Generate the corresponding pattern data according to the passed expression code.
* First draw a circular face with a radius of 28 in the center of the screen,
* Then erase (clear pixels) the eyes and mouth areas according to different expressions to form different expressions:
*
* 0x01 (sleeping): eyes are represented by horizontal lines (closed eyes), and the mouth is a simple straight line.
* 0x02 (wide-eyed): eyes are large circles (radius 5), and the mouth is represented by a small circle to indicate "open".
* 0x03 (happy): standard eyes (radius 3) and smiling mouth (approximated by two horizontal lines).
* 0x04 (fanatical): eyes are slightly larger (radius 4), and the mouth is "open" in a large area.
* 0x05 (very happy): standard eyes, a smile wider than the happy expression.
* 0x06 (greeting): one eye is normal, the other is blinking (horizontal line), with a gentle smile.
 */
void generateExpression(uint8_t* buffer, uint8_t expr) {
    // Basic facial parameters
    int center_x = SCREEN_WIDTH / 2;   // 64
    int center_y = SCREEN_HEIGHT / 2;    // 32
    int face_radius = 28;
    int left_eye_cx = center_x - 12;
    int left_eye_cy = center_y - 8;
    int right_eye_cx = center_x + 12;
    int right_eye_cy = center_y - 8;
    
    // Clear the buffer
    memset(buffer, 0, PAGE_COUNT * SCREEN_WIDTH);
    
// Draw a circular face: traverse each pixel on the screen and set it to 1 if it is within the circle
    for (int y = 0; y < SCREEN_HEIGHT; ++y) {
        for (int x = 0; x < SCREEN_WIDTH; ++x) {
            int dx = x - center_x;
            int dy = y - center_y;
            if (dx * dx + dy * dy <= face_radius * face_radius) {
                setPixel(buffer, x, y, true);
            }
        }
    }
    
// Erase the corresponding eye and mouth areas according to the expression (clear pixels to 0)
    if (expr == EXP_SLEEP) {
        // Sleep: eyes are closed with horizontal lines
        for (int x = left_eye_cx - 3; x <= left_eye_cx + 3; ++x)
            setPixel(buffer, x, left_eye_cy, false);
        for (int x = right_eye_cx - 3; x <= right_eye_cx + 3; ++x)
            setPixel(buffer, x, right_eye_cy, false);
// Mouth: simple horizontal line
        for (int x = center_x - 5; x <= center_x + 5; ++x)
            setPixel(buffer, x, center_y + 10, false);
    }
    else if (expr == EXP_WIDE_EYES) {
// Stare: Use a large circle (radius 5) to erase the eye area
        for (int y = 0; y < SCREEN_HEIGHT; ++y) {
            for (int x = 0; x < SCREEN_WIDTH; ++x) {
                int dx = x - left_eye_cx;
                int dy = y - left_eye_cy;
                if (dx * dx + dy * dy <= 5 * 5)
                    setPixel(buffer, x, y, false);
                dx = x - right_eye_cx;
                dy = y - right_eye_cy;
                if (dx * dx + dy * dy <= 5 * 5)
                    setPixel(buffer, x, y, false);
            }
        }
// Mouth: Use a small circle (radius 2) to represent an open mouth
        for (int y = center_y + 10 - 2; y <= center_y + 10 + 2; ++y) {
            for (int x = center_x - 2; x <= center_x + 2; ++x) {
                int dx = x - center_x;
                int dy = y - (center_y + 10);
                if (dx * dx + dy * dy <= 2 * 2)
                    setPixel(buffer, x, y, false);
            }
        }
    }
    else if (expr == EXP_HAPPY) {
// Happy: Standard eyes (radius 3)
        for (int y = 0; y < SCREEN_HEIGHT; ++y) {
            for (int x = 0; x < SCREEN_WIDTH; ++x) {
                int dx = x - left_eye_cx;
                int dy = y - left_eye_cy;
                if (dx * dx + dy * dy <= 3 * 3)
                    setPixel(buffer, x, y, false);
                dx = x - right_eye_cx;
                dy = y - right_eye_cy;
                if (dx * dx + dy * dy <= 3 * 3)
                    setPixel(buffer, x, y, false);
            }
        }
// Mouth: Use two horizontal lines to approximate the smile curve
        for (int x = center_x - 10; x <= center_x + 10; ++x) {
            setPixel(buffer, x, center_y + 10, false);
            setPixel(buffer, x, center_y + 11, false);
        }
    }
    else if (expr == EXP_FRENZIED) {
// Frenzy: eyes slightly larger (radius 4)
        for (int y = 0; y < SCREEN_HEIGHT; ++y) {
            for (int x = 0; x < SCREEN_WIDTH; ++x) {
                int dx = x - left_eye_cx;
                int dy = y - left_eye_cy;
                if (dx * dx + dy * dy <= 4 * 4)
                    setPixel(buffer, x, y, false);
                dx = x - right_eye_cx;
                dy = y - right_eye_cy;
                if (dx * dx + dy * dy <= 4 * 4)
                    setPixel(buffer, x, y, false);
            }
        }
// Mouth: Large opening, erase a large rectangular area
        for (int y = center_y + 9; y <= center_y + 13; ++y) {
            for (int x = center_x - 12; x <= center_x + 12; ++x)
                setPixel(buffer, x, y, false);
        }
    }
    else if (expr == EXP_VERY_HAPPY) {
// Very happy: eyes with happy expression (radius 3)
        for (int y = 0; y < SCREEN_HEIGHT; ++y) {
            for (int x = 0; x < SCREEN_WIDTH; ++x) {
                int dx = x - left_eye_cx;
                int dy = y - left_eye_cy;
                if (dx * dx + dy * dy <= 3 * 3)
                    setPixel(buffer, x, y, false);
                dx = x - right_eye_cx;
                dy = y - right_eye_cy;
                if (dx * dx + dy * dy <= 3 * 3)
                    setPixel(buffer, x, y, false);
            }
        }
// Mouth: A wider smile than a happy expression
        for (int x = center_x - 15; x <= center_x + 15; ++x) {
            setPixel(buffer, x, center_y + 9, false);
            setPixel(buffer, x, center_y + 10, false);
        }
    }
    else if (expr == EXP_GREETING) {
// Greeting: left eye normal (radius 3), right eye blinking (horizontal line)
        for (int y = 0; y < SCREEN_HEIGHT; ++y) {
            for (int x = 0; x < SCREEN_WIDTH; ++x) {
                int dx = x - left_eye_cx;
                int dy = y - left_eye_cy;
                if (dx * dx + dy * dy <= 3 * 3)
                    setPixel(buffer, x, y, false);
            }
        }
// Right eye: horizontal line indicates blinking
        for (int x = right_eye_cx - 3; x <= right_eye_cx + 3; ++x)
            setPixel(buffer, x, right_eye_cy, false);
// Mouth: Gentle smile, erase narrow band
        for (int x = center_x - 8; x <= center_x + 8; ++x)
            setPixel(buffer, x, center_y + 10, false);
    }
}

// Write the buffer content to OLED (page by page)
void drawExpression(int file, const uint8_t* buffer) {
    for (uint8_t page = 0; page < PAGE_COUNT; ++page) {
        sendCommand(file, 0xB0 + page);  // Set the page address
        sendCommand(file, 0x00);         // Set the low column address
        sendCommand(file, 0x10);         // Set the high column address
        sendData(file, &buffer[page * SCREEN_WIDTH], SCREEN_WIDTH);
    }
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        std::cerr << "用法: " << argv[0] << " <Sticker Code (0x01~0x06)>" << std::endl;
        return 1;
    }
    uint8_t exprCode = std::strtoul(argv[1], nullptr, 0);
    if (exprCode < EXP_SLEEP || exprCode > EXP_GREETING) {
        std::cerr << "Invalid emoji code, please use 0x01~0x06" << std::endl;
        return 1;
    }
    
// Open the I2C device
    int file = open("/dev/i2c-1", O_RDWR);
    if (file < 0) {
        std::cerr << "Unable to open I2C device" << std::endl;
        return 1;
    }
  // Set the OLED I2C address
    if (ioctl(file, I2C_SLAVE, OLED_ADDR) < 0) {
        std::cerr << "无法与OLED通信" << std::endl;
        close(file);
        return 1;
    }
    
    // Prepare the display data buffer
    uint8_t display_buffer[PAGE_COUNT * SCREEN_WIDTH];
    
    // Generate pattern data according to expression code and display it
    generateExpression(display_buffer, exprCode);
    drawExpression(file, display_buffer);
    
   // Clear the screen after displaying for 5 seconds
    std::this_thread::sleep_for(std::chrono::seconds(5));
    memset(display_buffer, 0, sizeof(display_buffer));
    drawExpression(file, display_buffer);
    
    close(file);
    return 0;
}
