#include "debug.h"
#include "whisper_fuzzy.h"
#include "rotate180.h"   // 新的舵机控制接口头文件

#include <iostream>
#include <thread>
#include <vector>
#include <string>
#include <cstring>

//
// Whisper 识别回调函数
// 当匹配到 code="0x06" 时，调用 rotateServo180() 完成平滑旋转到180°
//
static int whisper_user_callback(size_t leat_count, const char *text, const char* code, void* userdata) {
    if (leat_count)
        return 1;
    if (!text || !code || !userdata) {
        LOG_ERR("args fail! text(%p), code(%p), userdata(%p)", text, code, userdata);
        return -1;
    }
    size_t &count = *(size_t *)userdata;
    ++count;
    LOG_INFO("[%zu] get text: %s, code: %s", count, text, code);

    // 当匹配到 code=0x06 时，调用平滑旋转函数
    if (strcmp(code, "0x06") == 0) {
        std::cout << "[Action] Matched code 0x06 => rotating servo to 180°" << std::endl;
        rotateServo180();
    }
    return 0;
}

//
// Whisper 任务线程
//
void whisper_fuzzy_task(void* userdata) {
    whisper_fuzzy_t* w = (whisper_fuzzy_t*)userdata;
    std::cout << "Task whisper is running on thread " << std::this_thread::get_id() << std::endl;
    size_t count = 0;
    int ret = whisper_fuzzy(w, whisper_user_callback, &count);
    LOG_INFO("whisper ret: %d", ret);
    std::cout << "Task whisper completed" << std::endl;
}

//
// 主函数
//
int main(int argc, char const* argv[]) {
    const int numThreads = 1;
    std::vector<std::thread> threads;

    // 初始化 whisper 模块
    whisper_fuzzy_t* w = whisper_fuzzy_init(argc, argv);
    if (!w) {
        LOG_ERR("fail to init whisper");
        return -1;
    }

    // 启动语音识别线程（其它部分保持不变）
    for (int i = 0; i < numThreads; ++i) {
        threads.emplace_back(whisper_fuzzy_task, w);
    }
    for (auto& th : threads) {
        th.join();
    }
    whisper_fuzzy_exit(w);

    std::cout << "All tasks are completed." << std::endl;
    return 0;
}
